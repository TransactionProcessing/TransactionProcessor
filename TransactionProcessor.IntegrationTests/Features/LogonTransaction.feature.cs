// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TransactionProcessor.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LogonTransaction")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    public partial class LogonTransactionFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
#line 1 "LogonTransaction.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "LogonTransaction", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table1.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table1.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST  Scope",
                        "A scope for Transaction Processor REST"});
#line 6
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table1, "Given ");
#line hidden
            Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table2.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table2.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
#line 11
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table2, "Given ");
#line hidden
            Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table3.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor",
                        "client_credentials"});
#line 16
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table3, "Given ");
#line hidden
            Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                        "ClientId"});
            table4.AddRow(new string[] {
                        "serviceClient"});
#line 20
 await testRunner.GivenAsync("I have a token to access the estate management and transaction processor resource" +
                    "s", ((string)(null)), table4, "Given ");
#line hidden
            Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                        "EstateName"});
            table5.AddRow(new string[] {
                        "Test Estate 1"});
#line 24
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table5, "Given ");
#line hidden
            Reqnroll.Table table6 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table6.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1",
                        "True",
                        "True"});
#line 28
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table6, "Given ");
#line hidden
            Reqnroll.Table table7 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table7.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Operator 1"});
#line 32
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table7, "And ");
#line hidden
            Reqnroll.Table table8 = new Reqnroll.Table(new string[] {
                        "MerchantName",
                        "AddressLine1",
                        "Town",
                        "Region",
                        "Country",
                        "ContactName",
                        "EmailAddress",
                        "EstateName"});
            table8.AddRow(new string[] {
                        "Test Merchant 1",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant1.co.uk",
                        "Test Estate 1"});
            table8.AddRow(new string[] {
                        "Test Merchant 2",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 2",
                        "testcontact2@merchant2.co.uk",
                        "Test Estate 1"});
            table8.AddRow(new string[] {
                        "Test Merchant 3",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 3",
                        "testcontact3@merchant2.co.uk",
                        "Test Estate 1"});
            table8.AddRow(new string[] {
                        "Test Merchant 4",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 4",
                        "testcontact4@merchant2.co.uk",
                        "Test Estate 1"});
            table8.AddRow(new string[] {
                        "Test Merchant 5",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 5",
                        "testcontact5@merchant2.co.uk",
                        "Test Estate 1"});
            table8.AddRow(new string[] {
                        "Test Merchant 6",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 6",
                        "testcontact6@merchant2.co.uk",
                        "Test Estate 1"});
            table8.AddRow(new string[] {
                        "Test Merchant 7",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 7",
                        "testcontact7@merchant2.co.uk",
                        "Test Estate 1"});
#line 36
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table8, "Given ");
#line hidden
            Reqnroll.Table table9 = new Reqnroll.Table(new string[] {
                        "OperatorName",
                        "MerchantName",
                        "MerchantNumber",
                        "TerminalNumber",
                        "EstateName"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 2",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 3",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 4",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 5",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 6",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table9.AddRow(new string[] {
                        "Test Operator 1",
                        "Test Merchant 7",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
#line 46
 await testRunner.GivenAsync("I have assigned the following  operator to the merchants", ((string)(null)), table9, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Logon Transactions")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task LogonTransactions()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Logon Transactions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table10 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName"});
                table10.AddRow(new string[] {
                            "Today",
                            "1",
                            "Logon",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1"});
                table10.AddRow(new string[] {
                            "Today",
                            "2",
                            "Logon",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1"});
                table10.AddRow(new string[] {
                            "Today",
                            "3",
                            "Logon",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1"});
#line 59
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table10, "When ");
#line hidden
                Reqnroll.Table table11 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table11.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1",
                            "0001",
                            "SUCCESS"});
                table11.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "2",
                            "0001",
                            "SUCCESS"});
                table11.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "3",
                            "0001",
                            "SUCCESS"});
#line 65
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table11, "Then ");
#line hidden
                Reqnroll.Table table12 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "MerchantNumber",
                            "EstateName"});
                table12.AddRow(new string[] {
                            "123456783",
                            "Test Merchant 4",
                            "00000001",
                            "Test Estate 1"});
#line 71
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table12, "Given ");
#line hidden
                Reqnroll.Table table13 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName"});
                table13.AddRow(new string[] {
                            "Today",
                            "4",
                            "Logon",
                            "Test Merchant 4",
                            "123456783",
                            "Test Estate 1"});
#line 75
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table13, "When ");
#line hidden
                Reqnroll.Table table14 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table14.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 4",
                            "4",
                            "0000",
                            "SUCCESS"});
#line 79
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table14, "Then ");
#line hidden
                Reqnroll.Table table15 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName"});
                table15.AddRow(new string[] {
                            "Today",
                            "5",
                            "Logon",
                            "Test Merchant 1",
                            "13579135",
                            "Test Estate 1"});
#line 83
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table15, "When ");
#line hidden
                Reqnroll.Table table16 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table16.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "5",
                            "1000",
                            "Device Identifier 13579135 not valid for Merchant Test Merchant 1"});
#line 87
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table16, "Then ");
#line hidden
                Reqnroll.Table table17 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName"});
                table17.AddRow(new string[] {
                            "Today",
                            "6",
                            "Logon",
                            "Test Merchant 1",
                            "123456785",
                            "InvalidEstate"});
#line 91
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table17, "When ");
#line hidden
                Reqnroll.Table table18 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table18.AddRow(new string[] {
                            "InvalidEstate",
                            "Test Merchant 1",
                            "6",
                            "1001",
                            "Estate Id [79902550-64df-4491-b0c1-4e78943928a3] is not a valid estate"});
#line 95
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table18, "Then ");
#line hidden
                Reqnroll.Table table19 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName"});
                table19.AddRow(new string[] {
                            "Today",
                            "7",
                            "Logon",
                            "InvalidMerchant",
                            "123456786",
                            "Test Estate 1"});
#line 99
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table19, "When ");
#line hidden
                Reqnroll.Table table20 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table20.AddRow(new string[] {
                            "Test Estate 1",
                            "InvalidMerchant",
                            "7",
                            "1002",
                            "Merchant Id [d59320fa-4c3e-4900-a999-483f6a10c69a] is not a valid merchant for es" +
                                "tate [Test Estate 1]"});
#line 103
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table20, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
