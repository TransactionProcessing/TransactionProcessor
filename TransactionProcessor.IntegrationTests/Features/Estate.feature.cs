// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TransactionProcessor.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Estate")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    public partial class EstateFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
#line 1 "Estate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Estate", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                        "Role Name"});
            table1.AddRow(new string[] {
                        "Estate"});
#line 5
 await testRunner.GivenAsync("the following security roles exist", ((string)(null)), table1, "Given ");
#line hidden
            Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table2.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
#line 9
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table2, "Given ");
#line hidden
            Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table3.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "merchantId, estateId, role"});
#line 13
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table3, "Given ");
#line hidden
            Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table4.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement",
                        "client_credentials"});
            table4.AddRow(new string[] {
                        "estateClient",
                        "Estate Client",
                        "Secret1",
                        "estateManagement",
                        "password"});
#line 17
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table4, "Given ");
#line hidden
            Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                        "ClientId"});
            table5.AddRow(new string[] {
                        "serviceClient"});
#line 22
 await testRunner.GivenAsync("I have a token to access the estate management resource", ((string)(null)), table5, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Estate")]
        public async System.Threading.Tasks.Task GetEstate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Estate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table6 = new Reqnroll.Table(new string[] {
                            "EstateName"});
                table6.AddRow(new string[] {
                            "Test Estate 1"});
#line 27
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table6, "Given ");
#line hidden
                Reqnroll.Table table7 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table7.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "True",
                            "True"});
                table7.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 2",
                            "True",
                            "True"});
#line 30
 await testRunner.AndAsync("I have created the following operators", ((string)(null)), table7, "And ");
#line hidden
                Reqnroll.Table table8 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName"});
                table8.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1"});
                table8.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 2"});
#line 34
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table8, "And ");
#line hidden
                Reqnroll.Table table9 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "EstateName"});
                table9.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User1",
                            "Test Estate 1"});
                table9.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User2",
                            "Test Estate 1"});
#line 38
 await testRunner.AndAsync("I have created the following security users", ((string)(null)), table9, "And ");
#line hidden
                Reqnroll.Table table10 = new Reqnroll.Table(new string[] {
                            "EstateName"});
                table10.AddRow(new string[] {
                            "Test Estate 1"});
#line 42
 await testRunner.WhenAsync("I get the estate \"Test Estate 1\" the estate details are returned as follows", ((string)(null)), table10, "When ");
#line hidden
                Reqnroll.Table table11 = new Reqnroll.Table(new string[] {
                            "OperatorName"});
                table11.AddRow(new string[] {
                            "Test Operator 1"});
                table11.AddRow(new string[] {
                            "Test Operator 2"});
#line 45
 await testRunner.WhenAsync("I get the estate \"Test Estate 1\" the estate operator details are returned as foll" +
                        "ows", ((string)(null)), table11, "When ");
#line hidden
                Reqnroll.Table table12 = new Reqnroll.Table(new string[] {
                            "EmailAddress"});
                table12.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk"});
                table12.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk"});
#line 49
 await testRunner.WhenAsync("I get the estate \"Test Estate 1\" the estate security user details are returned as" +
                        " follows", ((string)(null)), table12, "When ");
#line hidden
#line 53
 await testRunner.WhenAsync("I get the estate \"Test Estate 2\" an error is returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.GivenAsync("I am logged in as \"estateuser1@testestate1.co.uk\" with password \"123456\" for Esta" +
                        "te \"Test Estate 1\" with client \"estateClient\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
                Reqnroll.Table table13 = new Reqnroll.Table(new string[] {
                            "EstateName"});
                table13.AddRow(new string[] {
                            "Test Estate 1"});
#line 55
 await testRunner.WhenAsync("I get the estate \"Test Estate 1\" the estate details are returned as follows", ((string)(null)), table13, "When ");
#line hidden
                Reqnroll.Table table14 = new Reqnroll.Table(new string[] {
                            "OperatorName"});
                table14.AddRow(new string[] {
                            "Test Operator 1"});
                table14.AddRow(new string[] {
                            "Test Operator 2"});
#line 58
 await testRunner.WhenAsync("I get the estate \"Test Estate 1\" the estate operator details are returned as foll" +
                        "ows", ((string)(null)), table14, "When ");
#line hidden
                Reqnroll.Table table15 = new Reqnroll.Table(new string[] {
                            "EmailAddress"});
                table15.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk"});
                table15.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk"});
#line 62
 await testRunner.WhenAsync("I get the estate \"Test Estate 1\" the estate security user details are returned as" +
                        " follows", ((string)(null)), table15, "When ");
#line hidden
#line 66
 await testRunner.WhenAsync("I get the estate \"Test Estate 2\" an error is returned", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Estate")]
        public async System.Threading.Tasks.Task UpdateEstate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Update Estate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table16 = new Reqnroll.Table(new string[] {
                            "EstateName"});
                table16.AddRow(new string[] {
                            "Test Estate 1"});
#line 69
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table16, "Given ");
#line hidden
                Reqnroll.Table table17 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName",
                            "RequireCustomMerchantNumber",
                            "RequireCustomTerminalNumber"});
                table17.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1",
                            "True",
                            "True"});
                table17.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 2",
                            "True",
                            "True"});
#line 72
 await testRunner.AndAsync("I have created the following operators", ((string)(null)), table17, "And ");
#line hidden
                Reqnroll.Table table18 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "OperatorName"});
                table18.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 1"});
                table18.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Operator 2"});
#line 76
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table18, "And ");
#line hidden
                Reqnroll.Table table19 = new Reqnroll.Table(new string[] {
                            "EmailAddress",
                            "Password",
                            "GivenName",
                            "FamilyName",
                            "EstateName"});
                table19.AddRow(new string[] {
                            "estateuser1@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User1",
                            "Test Estate 1"});
                table19.AddRow(new string[] {
                            "estateuser2@testestate1.co.uk",
                            "123456",
                            "TestEstate",
                            "User2",
                            "Test Estate 1"});
#line 80
 await testRunner.AndAsync("I have created the following security users", ((string)(null)), table19, "And ");
#line hidden
#line 84
 await testRunner.WhenAsync("I remove the operator \'Test Operator 1\' from estate \'Test Estate 1\' the operator " +
                        "is removed", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
