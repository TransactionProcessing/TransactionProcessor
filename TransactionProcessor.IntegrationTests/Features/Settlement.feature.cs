// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace TransactionProcessor.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Settlement")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    public partial class SettlementFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Settlement", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Settlement.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table186 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table186.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table186.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST  Scope",
                        "A scope for Transaction Processor REST"});
            table186.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST  Scope",
                        "A scope for Voucher Management REST"});
#line 6
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table186, "Given ");
#line hidden
            global::Reqnroll.Table table187 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table187.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table187.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
            table187.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST",
                        "Secret1",
                        "voucherManagement",
                        ""});
#line 12
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table187, "Given ");
#line hidden
            global::Reqnroll.Table table188 = new global::Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table188.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor,voucherManagement",
                        "client_credentials"});
#line 18
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table188, "Given ");
#line hidden
            global::Reqnroll.Table table189 = new global::Reqnroll.Table(new string[] {
                        "ClientId"});
            table189.AddRow(new string[] {
                        "serviceClient"});
#line 22
 await testRunner.GivenAsync("I have a token to access the estate management and transaction processor resource" +
                    "s", ((string)(null)), table189, "Given ");
#line hidden
            global::Reqnroll.Table table190 = new global::Reqnroll.Table(new string[] {
                        "EstateName"});
            table190.AddRow(new string[] {
                        "Test Estate 1"});
#line 26
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table190, "Given ");
#line hidden
            global::Reqnroll.Table table191 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table191.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "False",
                        "False"});
            table191.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "False",
                        "False"});
#line 30
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table191, "Given ");
#line hidden
            global::Reqnroll.Table table192 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table192.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom"});
            table192.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher"});
#line 35
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table192, "And ");
#line hidden
            global::Reqnroll.Table table193 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table193.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract"});
            table193.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract"});
#line 40
 await testRunner.GivenAsync("I create a contract with the following values", ((string)(null)), table193, "Given ");
#line hidden
            global::Reqnroll.Table table194 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "DisplayText",
                        "Value",
                        "ProductType"});
            table194.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Custom",
                        "",
                        "MobileTopup"});
            table194.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract",
                        "10 KES",
                        "10 KES",
                        "",
                        "Voucher"});
#line 45
 await testRunner.WhenAsync("I create the following Products", ((string)(null)), table194, "When ");
#line hidden
            global::Reqnroll.Table table195 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "CalculationType",
                        "FeeDescription",
                        "Value"});
            table195.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Fixed",
                        "Merchant Commission",
                        "2.50"});
#line 50
 await testRunner.WhenAsync("I add the following Transaction Fees", ((string)(null)), table195, "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Pending Settlement")]
        public async global::System.Threading.Tasks.Task GetPendingSettlement()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get Pending Settlement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table196 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table196.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Immediate"});
                table196.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 2",
                            "testcontact2@merchant2.co.uk",
                            "Test Estate 1",
                            "Weekly"});
                table196.AddRow(new string[] {
                            "Test Merchant 3",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 3",
                            "testcontact3@merchant2.co.uk",
                            "Test Estate 1",
                            "Monthly"});
#line 55
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table196, "Given ");
#line hidden
                global::Reqnroll.Table table197 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table197.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table197.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table197.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
                table197.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
                table197.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 3",
                            "00000003",
                            "10000003",
                            "Test Estate 1"});
                table197.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 3",
                            "00000003",
                            "10000003",
                            "Test Estate 1"});
#line 61
 await testRunner.GivenAsync("I have assigned the following operator to the merchants", ((string)(null)), table197, "Given ");
#line hidden
                global::Reqnroll.Table table198 = new global::Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table198.AddRow(new string[] {
                            "123456780",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table198.AddRow(new string[] {
                            "123456781",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table198.AddRow(new string[] {
                            "123456782",
                            "Test Merchant 3",
                            "Test Estate 1"});
#line 70
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table198, "Given ");
#line hidden
                global::Reqnroll.Table table199 = new global::Reqnroll.Table(new string[] {
                            "Reference",
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table199.AddRow(new string[] {
                            "Deposit1",
                            "210.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table199.AddRow(new string[] {
                            "Deposit1",
                            "110.00",
                            "Today",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table199.AddRow(new string[] {
                            "Deposit1",
                            "120.00",
                            "Today",
                            "Test Merchant 3",
                            "Test Estate 1"});
#line 76
 await testRunner.GivenAsync("I make the following manual merchant deposits", ((string)(null)), table199, "Given ");
#line hidden
                global::Reqnroll.Table table200 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "ContractDescription"});
                table200.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Safaricom Contract"});
                table200.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Hospital 1 Contract"});
                table200.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Safaricom Contract"});
                table200.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Hospital 1 Contract"});
                table200.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "Safaricom Contract"});
                table200.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "Hospital 1 Contract"});
#line 82
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table200, "When ");
#line hidden
                global::Reqnroll.Table table201 = new global::Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName",
                            "RecipientEmail",
                            "RecipientMobile"});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "1",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "2",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "3",
                            "Sale",
                            "2",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "4",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "5",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "6",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "",
                            "123456789"});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "7",
                            "Sale",
                            "2",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
                table201.AddRow(new string[] {
                            "2022-01-06",
                            "8",
                            "Sale",
                            "1",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
#line 91
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table201, "When ");
#line hidden
                global::Reqnroll.Table table202 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "2",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "3",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "4",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "5",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "6",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "7",
                            "0000",
                            "SUCCESS"});
                table202.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "8",
                            "0000",
                            "SUCCESS"});
#line 102
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table202, "Then ");
#line hidden
                global::Reqnroll.Table table203 = new global::Reqnroll.Table(new string[] {
                            "SettlementDate",
                            "EstateName",
                            "MerchantName",
                            "NumberOfFees"});
                table203.AddRow(new string[] {
                            "2022-01-13",
                            "Test Estate 1",
                            "Test Merchant 2",
                            "1"});
                table203.AddRow(new string[] {
                            "2022-02-06",
                            "Test Estate 1",
                            "Test Merchant 3",
                            "1"});
#line 113
 await testRunner.WhenAsync("I get the pending settlements the following information should be returned", ((string)(null)), table203, "When ");
#line hidden
                global::Reqnroll.Table table204 = new global::Reqnroll.Table(new string[] {
                            "SettlementDate",
                            "EstateName",
                            "MerchantName",
                            "NumberOfFees"});
                table204.AddRow(new string[] {
                            "2022-01-06",
                            "Test Estate 1",
                            "Test Merchant 1",
                            "2"});
#line 118
 await testRunner.WhenAsync("I get the completed settlements the following information should be returned", ((string)(null)), table204, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Process Settlement")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async global::System.Threading.Tasks.Task ProcessSettlement()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Process Settlement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table205 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table205.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Immediate"});
                table205.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 2",
                            "testcontact2@merchant2.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 124
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table205, "Given ");
#line hidden
                global::Reqnroll.Table table206 = new global::Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table206.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table206.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table206.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
                table206.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
#line 129
 await testRunner.GivenAsync("I have assigned the following operator to the merchants", ((string)(null)), table206, "Given ");
#line hidden
                global::Reqnroll.Table table207 = new global::Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table207.AddRow(new string[] {
                            "123456780",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table207.AddRow(new string[] {
                            "123456781",
                            "Test Merchant 2",
                            "Test Estate 1"});
#line 136
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table207, "Given ");
#line hidden
                global::Reqnroll.Table table208 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "ContractDescription"});
                table208.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Safaricom Contract"});
                table208.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Hospital 1 Contract"});
                table208.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Safaricom Contract"});
                table208.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Hospital 1 Contract"});
#line 141
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table208, "When ");
#line hidden
                global::Reqnroll.Table table209 = new global::Reqnroll.Table(new string[] {
                            "Reference",
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table209.AddRow(new string[] {
                            "Deposit1",
                            "210.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table209.AddRow(new string[] {
                            "Deposit1",
                            "110.00",
                            "Today",
                            "Test Merchant 2",
                            "Test Estate 1"});
#line 148
 await testRunner.GivenAsync("I make the following manual merchant deposits", ((string)(null)), table209, "Given ");
#line hidden
                global::Reqnroll.Table table210 = new global::Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName",
                            "RecipientEmail",
                            "RecipientMobile"});
                table210.AddRow(new string[] {
                            "2022-01-06",
                            "1",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table210.AddRow(new string[] {
                            "2022-01-06",
                            "2",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table210.AddRow(new string[] {
                            "2022-01-06",
                            "4",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table210.AddRow(new string[] {
                            "2022-01-06",
                            "5",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
                table210.AddRow(new string[] {
                            "2022-01-06",
                            "6",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "",
                            "123456789"});
#line 153
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table210, "When ");
#line hidden
                global::Reqnroll.Table table211 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table211.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1",
                            "0000",
                            "SUCCESS"});
                table211.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "2",
                            "0000",
                            "SUCCESS"});
                table211.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "4",
                            "0000",
                            "SUCCESS"});
                table211.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "5",
                            "0000",
                            "SUCCESS"});
                table211.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "6",
                            "0000",
                            "SUCCESS"});
#line 161
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table211, "Then ");
#line hidden
                global::Reqnroll.Table table212 = new global::Reqnroll.Table(new string[] {
                            "SettlementDate",
                            "EstateName",
                            "MerchantName",
                            "NumberOfFees"});
                table212.AddRow(new string[] {
                            "2022-01-13",
                            "Test Estate 1",
                            "Test Merchant 2",
                            "1"});
#line 169
 await testRunner.WhenAsync("I get the pending settlements the following information should be returned", ((string)(null)), table212, "When ");
#line hidden
#line 173
 await testRunner.WhenAsync("I process the settlement for \'2022-01-13\' on Estate \'Test Estate 1\' for Merchant " +
                        "\'Test Merchant 2\' then 1 fees are marked as settled and the settlement is comple" +
                        "ted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
