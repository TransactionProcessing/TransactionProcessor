// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TransactionProcessor.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Settlement")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    public partial class SettlementFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
#line 1 "Settlement.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Settlement", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table144 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table144.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table144.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST  Scope",
                        "A scope for Transaction Processor REST"});
            table144.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST  Scope",
                        "A scope for Voucher Management REST"});
#line 6
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table144, "Given ");
#line hidden
            Reqnroll.Table table145 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table145.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table145.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
            table145.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST",
                        "Secret1",
                        "voucherManagement",
                        ""});
#line 12
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table145, "Given ");
#line hidden
            Reqnroll.Table table146 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table146.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor,voucherManagement",
                        "client_credentials"});
#line 18
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table146, "Given ");
#line hidden
            Reqnroll.Table table147 = new Reqnroll.Table(new string[] {
                        "ClientId"});
            table147.AddRow(new string[] {
                        "serviceClient"});
#line 22
 await testRunner.GivenAsync("I have a token to access the estate management and transaction processor resource" +
                    "s", ((string)(null)), table147, "Given ");
#line hidden
            Reqnroll.Table table148 = new Reqnroll.Table(new string[] {
                        "EstateName"});
            table148.AddRow(new string[] {
                        "Test Estate 1"});
#line 26
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table148, "Given ");
#line hidden
            Reqnroll.Table table149 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table149.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "True",
                        "True"});
            table149.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "True",
                        "True"});
#line 30
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table149, "Given ");
#line hidden
            Reqnroll.Table table150 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table150.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom"});
            table150.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher"});
#line 35
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table150, "And ");
#line hidden
            Reqnroll.Table table151 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table151.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract"});
            table151.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract"});
#line 40
 await testRunner.GivenAsync("I create a contract with the following values", ((string)(null)), table151, "Given ");
#line hidden
            Reqnroll.Table table152 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "DisplayText",
                        "Value",
                        "ProductType"});
            table152.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Custom",
                        "",
                        "MobileTopup"});
            table152.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract",
                        "10 KES",
                        "10 KES",
                        "",
                        "Voucher"});
#line 45
 await testRunner.WhenAsync("I create the following Products", ((string)(null)), table152, "When ");
#line hidden
            Reqnroll.Table table153 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "CalculationType",
                        "FeeDescription",
                        "Value"});
            table153.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Fixed",
                        "Merchant Commission",
                        "2.50"});
#line 50
 await testRunner.WhenAsync("I add the following Transaction Fees", ((string)(null)), table153, "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Pending Settlement")]
        public async System.Threading.Tasks.Task GetPendingSettlement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Get Pending Settlement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table154 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table154.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Immediate"});
                table154.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 2",
                            "testcontact2@merchant2.co.uk",
                            "Test Estate 1",
                            "Weekly"});
                table154.AddRow(new string[] {
                            "Test Merchant 3",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 3",
                            "testcontact3@merchant2.co.uk",
                            "Test Estate 1",
                            "Monthly"});
#line 55
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table154, "Given ");
#line hidden
                Reqnroll.Table table155 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table155.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table155.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table155.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
                table155.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
                table155.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 3",
                            "00000003",
                            "10000003",
                            "Test Estate 1"});
                table155.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 3",
                            "00000003",
                            "10000003",
                            "Test Estate 1"});
#line 61
 await testRunner.GivenAsync("I have assigned the following  operator to the merchants", ((string)(null)), table155, "Given ");
#line hidden
                Reqnroll.Table table156 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table156.AddRow(new string[] {
                            "123456780",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table156.AddRow(new string[] {
                            "123456781",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table156.AddRow(new string[] {
                            "123456782",
                            "Test Merchant 3",
                            "Test Estate 1"});
#line 70
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table156, "Given ");
#line hidden
                Reqnroll.Table table157 = new Reqnroll.Table(new string[] {
                            "Reference",
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table157.AddRow(new string[] {
                            "Deposit1",
                            "210.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table157.AddRow(new string[] {
                            "Deposit1",
                            "110.00",
                            "Today",
                            "Test Merchant 2",
                            "Test Estate 1"});
                table157.AddRow(new string[] {
                            "Deposit1",
                            "120.00",
                            "Today",
                            "Test Merchant 3",
                            "Test Estate 1"});
#line 76
 await testRunner.GivenAsync("I make the following manual merchant deposits", ((string)(null)), table157, "Given ");
#line hidden
                Reqnroll.Table table158 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "ContractDescription"});
                table158.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Safaricom Contract"});
                table158.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Hospital 1 Contract"});
                table158.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Safaricom Contract"});
                table158.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Hospital 1 Contract"});
                table158.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "Safaricom Contract"});
                table158.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "Hospital 1 Contract"});
#line 82
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table158, "When ");
#line hidden
                Reqnroll.Table table159 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName",
                            "RecipientEmail",
                            "RecipientMobile"});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "1",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "2",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "3",
                            "Sale",
                            "2",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "4",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "5",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "6",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "",
                            "123456789"});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "7",
                            "Sale",
                            "2",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
                table159.AddRow(new string[] {
                            "2022-01-06",
                            "8",
                            "Sale",
                            "1",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
#line 91
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table159, "When ");
#line hidden
                Reqnroll.Table table160 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "2",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "3",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "4",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "5",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "6",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "7",
                            "0000",
                            "SUCCESS"});
                table160.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "8",
                            "0000",
                            "SUCCESS"});
#line 102
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table160, "Then ");
#line hidden
                Reqnroll.Table table161 = new Reqnroll.Table(new string[] {
                            "SettlementDate",
                            "EstateName",
                            "MerchantName",
                            "NumberOfFees"});
                table161.AddRow(new string[] {
                            "2022-01-13",
                            "Test Estate 1",
                            "Test Merchant 2",
                            "1"});
                table161.AddRow(new string[] {
                            "2022-02-06",
                            "Test Estate 1",
                            "Test Merchant 3",
                            "1"});
#line 113
 await testRunner.WhenAsync("I get the pending settlements the following information should be returned", ((string)(null)), table161, "When ");
#line hidden
                Reqnroll.Table table162 = new Reqnroll.Table(new string[] {
                            "SettlementDate",
                            "EstateName",
                            "MerchantName",
                            "NumberOfFees"});
                table162.AddRow(new string[] {
                            "2022-01-06",
                            "Test Estate 1",
                            "Test Merchant 1",
                            "2"});
#line 118
 await testRunner.WhenAsync("I get the completed settlements the following information should be returned", ((string)(null)), table162, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Process Settlement")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task ProcessSettlement()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Process Settlement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table163 = new Reqnroll.Table(new string[] {
                            "MerchantName",
                            "AddressLine1",
                            "Town",
                            "Region",
                            "Country",
                            "ContactName",
                            "EmailAddress",
                            "EstateName",
                            "SettlementSchedule"});
                table163.AddRow(new string[] {
                            "Test Merchant 1",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 1",
                            "testcontact1@merchant1.co.uk",
                            "Test Estate 1",
                            "Immediate"});
                table163.AddRow(new string[] {
                            "Test Merchant 2",
                            "Address Line 1",
                            "TestTown",
                            "Test Region",
                            "United Kingdom",
                            "Test Contact 2",
                            "testcontact2@merchant2.co.uk",
                            "Test Estate 1",
                            "Weekly"});
#line 124
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table163, "Given ");
#line hidden
                Reqnroll.Table table164 = new Reqnroll.Table(new string[] {
                            "OperatorName",
                            "MerchantName",
                            "MerchantNumber",
                            "TerminalNumber",
                            "EstateName"});
                table164.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table164.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 1",
                            "00000001",
                            "10000001",
                            "Test Estate 1"});
                table164.AddRow(new string[] {
                            "Safaricom",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
                table164.AddRow(new string[] {
                            "Voucher",
                            "Test Merchant 2",
                            "00000002",
                            "10000002",
                            "Test Estate 1"});
#line 129
 await testRunner.GivenAsync("I have assigned the following  operator to the merchants", ((string)(null)), table164, "Given ");
#line hidden
                Reqnroll.Table table165 = new Reqnroll.Table(new string[] {
                            "DeviceIdentifier",
                            "MerchantName",
                            "EstateName"});
                table165.AddRow(new string[] {
                            "123456780",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table165.AddRow(new string[] {
                            "123456781",
                            "Test Merchant 2",
                            "Test Estate 1"});
#line 136
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table165, "Given ");
#line hidden
                Reqnroll.Table table166 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "ContractDescription"});
                table166.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Safaricom Contract"});
                table166.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "Hospital 1 Contract"});
                table166.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Safaricom Contract"});
                table166.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "Hospital 1 Contract"});
#line 141
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table166, "When ");
#line hidden
                Reqnroll.Table table167 = new Reqnroll.Table(new string[] {
                            "Reference",
                            "Amount",
                            "DateTime",
                            "MerchantName",
                            "EstateName"});
                table167.AddRow(new string[] {
                            "Deposit1",
                            "210.00",
                            "Today",
                            "Test Merchant 1",
                            "Test Estate 1"});
                table167.AddRow(new string[] {
                            "Deposit1",
                            "110.00",
                            "Today",
                            "Test Merchant 2",
                            "Test Estate 1"});
#line 148
 await testRunner.GivenAsync("I make the following manual merchant deposits", ((string)(null)), table167, "Given ");
#line hidden
                Reqnroll.Table table168 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName",
                            "RecipientEmail",
                            "RecipientMobile"});
                table168.AddRow(new string[] {
                            "2022-01-06",
                            "1",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table168.AddRow(new string[] {
                            "2022-01-06",
                            "2",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table168.AddRow(new string[] {
                            "2022-01-06",
                            "4",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            ""});
                table168.AddRow(new string[] {
                            "2022-01-06",
                            "5",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            ""});
                table168.AddRow(new string[] {
                            "2022-01-06",
                            "6",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "",
                            "123456789"});
#line 153
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table168, "When ");
#line hidden
                Reqnroll.Table table169 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table169.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1",
                            "0000",
                            "SUCCESS"});
                table169.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "2",
                            "0000",
                            "SUCCESS"});
                table169.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "4",
                            "0000",
                            "SUCCESS"});
                table169.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "5",
                            "0000",
                            "SUCCESS"});
                table169.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "6",
                            "0000",
                            "SUCCESS"});
#line 161
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table169, "Then ");
#line hidden
                Reqnroll.Table table170 = new Reqnroll.Table(new string[] {
                            "SettlementDate",
                            "EstateName",
                            "MerchantName",
                            "NumberOfFees"});
                table170.AddRow(new string[] {
                            "2022-01-13",
                            "Test Estate 1",
                            "Test Merchant 2",
                            "1"});
#line 169
 await testRunner.WhenAsync("I get the pending settlements the following information should be returned", ((string)(null)), table170, "When ");
#line hidden
#line 173
 await testRunner.WhenAsync("I process the settlement for \'2022-01-13\' on Estate \'Test Estate 1\' for Merchant " +
                        "\'Test Merchant 2\' then 1 fees are marked as settled and the settlement is comple" +
                        "ted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
