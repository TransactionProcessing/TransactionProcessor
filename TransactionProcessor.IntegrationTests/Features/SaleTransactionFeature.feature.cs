// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TransactionProcessor.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SaleTransaction")]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    public partial class SaleTransactionFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared"};
        
#line 1 "SaleTransactionFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SaleTransaction", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            Reqnroll.Table table80 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table80.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table80.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST  Scope",
                        "A scope for Transaction Processor REST"});
            table80.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST  Scope",
                        "A scope for Voucher Management REST"});
            table80.AddRow(new string[] {
                        "messagingService",
                        "Scope for Messaging REST",
                        "Scope for Messaging REST"});
#line 6
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table80, "Given ");
#line hidden
            Reqnroll.Table table81 = new Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table81.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table81.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
            table81.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST",
                        "Secret1",
                        "voucherManagement",
                        ""});
            table81.AddRow(new string[] {
                        "messagingService",
                        "Messaging REST",
                        "Secret",
                        "messagingService",
                        ""});
#line 13
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table81, "Given ");
#line hidden
            Reqnroll.Table table82 = new Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table82.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor,voucherManagement,messagingService",
                        "client_credentials"});
#line 20
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table82, "Given ");
#line hidden
            Reqnroll.Table table83 = new Reqnroll.Table(new string[] {
                        "ClientId"});
            table83.AddRow(new string[] {
                        "serviceClient"});
#line 24
 await testRunner.GivenAsync("I have a token to access the estate management and transaction processor resource" +
                    "s", ((string)(null)), table83, "Given ");
#line hidden
            Reqnroll.Table table84 = new Reqnroll.Table(new string[] {
                        "AccountNumber",
                        "AccountName",
                        "DueDate",
                        "Amount"});
            table84.AddRow(new string[] {
                        "12345678",
                        "Test Account 1",
                        "Today",
                        "100.00"});
#line 28
 await testRunner.GivenAsync("the following bills are available at the PataPawa PostPaid Host", ((string)(null)), table84, "Given ");
#line hidden
            Reqnroll.Table table85 = new Reqnroll.Table(new string[] {
                        "Username",
                        "Password"});
            table85.AddRow(new string[] {
                        "operatora",
                        "1234567898"});
#line 32
 await testRunner.GivenAsync("the following users are available at the PataPawa PrePay Host", ((string)(null)), table85, "Given ");
#line hidden
            Reqnroll.Table table86 = new Reqnroll.Table(new string[] {
                        "MeterNumber",
                        "CustomerName"});
            table86.AddRow(new string[] {
                        "00000001",
                        "Customer 1"});
            table86.AddRow(new string[] {
                        "00000002",
                        "Customer 2"});
            table86.AddRow(new string[] {
                        "00000003",
                        "Customer 3"});
#line 36
 await testRunner.GivenAsync("the following meters are available at the PataPawa PrePay Host", ((string)(null)), table86, "Given ");
#line hidden
            Reqnroll.Table table87 = new Reqnroll.Table(new string[] {
                        "EstateName"});
            table87.AddRow(new string[] {
                        "Test Estate 1"});
#line 42
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table87, "Given ");
#line hidden
            Reqnroll.Table table88 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table88.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "True",
                        "True"});
            table88.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "True",
                        "True"});
            table88.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PostPay",
                        "True",
                        "True"});
            table88.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PrePay",
                        "True",
                        "True"});
#line 46
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table88, "Given ");
#line hidden
            Reqnroll.Table table89 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table89.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom"});
            table89.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher"});
            table89.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PostPay"});
            table89.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PrePay"});
#line 53
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table89, "And ");
#line hidden
            Reqnroll.Table table90 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table90.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract"});
            table90.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract"});
            table90.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PostPay",
                        "PataPawa PostPay Contract"});
            table90.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PrePay",
                        "PataPawa PrePay Contract"});
#line 60
 await testRunner.GivenAsync("I create a contract with the following values", ((string)(null)), table90, "Given ");
#line hidden
            Reqnroll.Table table91 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "DisplayText",
                        "Value",
                        "ProductType"});
            table91.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Custom",
                        "",
                        "MobileTopup"});
            table91.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract",
                        "10 KES",
                        "10 KES",
                        "",
                        "Voucher"});
            table91.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PostPay",
                        "PataPawa PostPay Contract",
                        "Post Pay Bill Pay",
                        "Bill Pay (Post)",
                        "",
                        "BillPayment"});
            table91.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PrePay",
                        "PataPawa PrePay Contract",
                        "Pre Pay Bill Pay",
                        "Bill Pay (Pre)",
                        "",
                        "BillPayment"});
#line 67
 await testRunner.WhenAsync("I create the following Products", ((string)(null)), table91, "When ");
#line hidden
            Reqnroll.Table table92 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "CalculationType",
                        "FeeDescription",
                        "Value"});
            table92.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Percentage",
                        "Merchant Commission",
                        "0.50"});
            table92.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PostPay",
                        "PataPawa PostPay Contract",
                        "Post Pay Bill Pay",
                        "Percentage",
                        "Merchant Commission",
                        "0.50"});
            table92.AddRow(new string[] {
                        "Test Estate 1",
                        "PataPawa PrePay",
                        "PataPawa PrePay Contract",
                        "Pre Pay Bill Pay",
                        "Percentage",
                        "Merchant Commission",
                        "0.50"});
#line 74
 await testRunner.WhenAsync("I add the following Transaction Fees", ((string)(null)), table92, "When ");
#line hidden
            Reqnroll.Table table93 = new Reqnroll.Table(new string[] {
                        "MerchantName",
                        "AddressLine1",
                        "Town",
                        "Region",
                        "Country",
                        "ContactName",
                        "EmailAddress",
                        "EstateName"});
            table93.AddRow(new string[] {
                        "Test Merchant 1",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant1.co.uk",
                        "Test Estate 1"});
            table93.AddRow(new string[] {
                        "Test Merchant 2",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 2",
                        "testcontact2@merchant2.co.uk",
                        "Test Estate 1"});
            table93.AddRow(new string[] {
                        "Test Merchant 3",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 3",
                        "testcontact3@merchant3.co.uk",
                        "Test Estate 1"});
            table93.AddRow(new string[] {
                        "Test Merchant 4",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 4",
                        "testcontact4@merchant4.co.uk",
                        "Test Estate 1"});
#line 80
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table93, "Given ");
#line hidden
            Reqnroll.Table table94 = new Reqnroll.Table(new string[] {
                        "OperatorName",
                        "MerchantName",
                        "MerchantNumber",
                        "TerminalNumber",
                        "EstateName"});
            table94.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Voucher",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PostPay",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PrePay",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 2",
                        "00000002",
                        "10000002",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Voucher",
                        "Test Merchant 2",
                        "00000002",
                        "10000002",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PostPay",
                        "Test Merchant 2",
                        "00000002",
                        "10000002",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PrePay",
                        "Test Merchant 2",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 3",
                        "00000003",
                        "10000003",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Voucher",
                        "Test Merchant 3",
                        "00000003",
                        "10000003",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PostPay",
                        "Test Merchant 3",
                        "00000003",
                        "10000003",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PrePay",
                        "Test Merchant 3",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 4",
                        "00000004",
                        "10000004",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "Voucher",
                        "Test Merchant 4",
                        "00000004",
                        "10000004",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PostPay",
                        "Test Merchant 4",
                        "00000004",
                        "10000004",
                        "Test Estate 1"});
            table94.AddRow(new string[] {
                        "PataPawa PrePay",
                        "Test Merchant 4",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
#line 87
 await testRunner.GivenAsync("I have assigned the following  operator to the merchants", ((string)(null)), table94, "Given ");
#line hidden
            Reqnroll.Table table95 = new Reqnroll.Table(new string[] {
                        "DeviceIdentifier",
                        "MerchantName",
                        "EstateName"});
            table95.AddRow(new string[] {
                        "123456780",
                        "Test Merchant 1",
                        "Test Estate 1"});
            table95.AddRow(new string[] {
                        "123456781",
                        "Test Merchant 2",
                        "Test Estate 1"});
            table95.AddRow(new string[] {
                        "123456782",
                        "Test Merchant 3",
                        "Test Estate 1"});
            table95.AddRow(new string[] {
                        "123456783",
                        "Test Merchant 4",
                        "Test Estate 1"});
#line 106
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table95, "Given ");
#line hidden
            Reqnroll.Table table96 = new Reqnroll.Table(new string[] {
                        "Reference",
                        "Amount",
                        "DateTime",
                        "MerchantName",
                        "EstateName"});
            table96.AddRow(new string[] {
                        "Deposit1",
                        "265.00",
                        "Today",
                        "Test Merchant 1",
                        "Test Estate 1"});
            table96.AddRow(new string[] {
                        "Deposit1",
                        "110.00",
                        "Today",
                        "Test Merchant 2",
                        "Test Estate 1"});
            table96.AddRow(new string[] {
                        "Deposit1",
                        "110.00",
                        "Today",
                        "Test Merchant 3",
                        "Test Estate 1"});
            table96.AddRow(new string[] {
                        "Deposit1",
                        "100.00",
                        "Today",
                        "Test Merchant 4",
                        "Test Estate 1"});
#line 113
 await testRunner.GivenAsync("I make the following manual merchant deposits", ((string)(null)), table96, "Given ");
#line hidden
            Reqnroll.Table table97 = new Reqnroll.Table(new string[] {
                        "EstateName",
                        "MerchantName",
                        "ContractDescription"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 1",
                        "Safaricom Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 1",
                        "Hospital 1 Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 1",
                        "PataPawa PostPay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 1",
                        "PataPawa PrePay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 2",
                        "Safaricom Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 2",
                        "Hospital 1 Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 2",
                        "PataPawa PostPay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 2",
                        "PataPawa PrePay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 3",
                        "Safaricom Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 3",
                        "Hospital 1 Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 3",
                        "PataPawa PostPay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 3",
                        "PataPawa PrePay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 4",
                        "Safaricom Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 4",
                        "Hospital 1 Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 4",
                        "PataPawa PostPay Contract"});
            table97.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 4",
                        "PataPawa PrePay Contract"});
#line 120
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table97, "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sale Transactions")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task SaleTransactions()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Sale Transactions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table98 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName",
                            "RecipientEmail",
                            "RecipientMobile",
                            "MessageType",
                            "AccountNumber",
                            "CustomerName",
                            "MeterNumber"});
                table98.AddRow(new string[] {
                            "Today",
                            "1",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "110.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "2",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "3",
                            "Sale",
                            "2",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "4",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "90.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "5",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "6",
                            "Sale",
                            "1",
                            "Test Merchant 2",
                            "123456781",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "",
                            "123456789",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "7",
                            "Sale",
                            "2",
                            "Test Merchant 3",
                            "123456782",
                            "Test Estate 1",
                            "Voucher",
                            "10.00",
                            "",
                            "",
                            "Hospital 1 Contract",
                            "10 KES",
                            "test@recipient.co.uk",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "8",
                            "Sale",
                            "2",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "PataPawa PostPay",
                            "0.00",
                            "",
                            "",
                            "PataPawa PostPay Contract",
                            "Post Pay Bill Pay",
                            "test@recipient.co.uk",
                            "",
                            "VerifyAccount",
                            "12345678",
                            "",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "9",
                            "Sale",
                            "2",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "PataPawa PostPay",
                            "20.00",
                            "",
                            "",
                            "PataPawa PostPay Contract",
                            "Post Pay Bill Pay",
                            "test@recipient.co.uk",
                            "123456789",
                            "ProcessBill",
                            "12345678",
                            "Mr Test Customer",
                            ""});
                table98.AddRow(new string[] {
                            "Today",
                            "10",
                            "Sale",
                            "2",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "PataPawa PrePay",
                            "0.00",
                            "",
                            "",
                            "PataPawa PrePay Contract",
                            "Pre Pay Bill Pay",
                            "test@recipient.co.uk",
                            "",
                            "meter",
                            "",
                            "",
                            "00000001"});
                table98.AddRow(new string[] {
                            "Today",
                            "11",
                            "Sale",
                            "2",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "PataPawa PrePay",
                            "25.00",
                            "",
                            "",
                            "PataPawa PrePay Contract",
                            "Pre Pay Bill Pay",
                            "test@recipient.co.uk",
                            "",
                            "vend",
                            "00000001",
                            "Customer 1",
                            "00000001"});
#line 142
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table98, "When ");
#line hidden
                Reqnroll.Table table99 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "2",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "3",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "4",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "5",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "6",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 3",
                            "7",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "8",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "9",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "10",
                            "0000",
                            "SUCCESS"});
                table99.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "11",
                            "0000",
                            "SUCCESS"});
#line 156
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table99, "Then ");
#line hidden
                Reqnroll.Table table100 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "Reference",
                            "EntryType",
                            "In",
                            "Out",
                            "ChangeAmount",
                            "Balance"});
                table100.AddRow(new string[] {
                            "Today",
                            "Merchant Deposit",
                            "C",
                            "240.00",
                            "0.00",
                            "265.00",
                            "230.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "110.00",
                            "110.00",
                            "130.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "90.00",
                            "90.00",
                            "30.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "10.00",
                            "10.00",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "20.00",
                            "20.00",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "20.00",
                            "25.00",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Fee Processed",
                            "C",
                            "0.00",
                            "0.55",
                            "0.55",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Fee Processed",
                            "C",
                            "0.00",
                            "0.45",
                            "0.45",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Fee Processed",
                            "C",
                            "0.00",
                            "0.01",
                            "0.10",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Transaction Fee Processed",
                            "C",
                            "0.00",
                            "0.01",
                            "0.10",
                            "20.00"});
                table100.AddRow(new string[] {
                            "Today",
                            "Opening Balance",
                            "C",
                            "0.00",
                            "0.00",
                            "0.00",
                            "20.00"});
#line 170
 await testRunner.ThenAsync("the following entries appear in the merchants balance history for estate \'Test Es" +
                        "tate 1\' and merchant \'Test Merchant 1\'", ((string)(null)), table100, "Then ");
#line hidden
                Reqnroll.Table table101 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "Reference",
                            "EntryType",
                            "In",
                            "Out",
                            "ChangeAmount",
                            "Balance"});
                table101.AddRow(new string[] {
                            "Today",
                            "Merchant Deposit",
                            "C",
                            "110.00",
                            "0.00",
                            "110.00",
                            "230.00"});
                table101.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "100.00",
                            "100.00",
                            "130.00"});
                table101.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "10.00",
                            "10.00",
                            "30.00"});
                table101.AddRow(new string[] {
                            "Today",
                            "Transaction Fee Processed",
                            "C",
                            "0.00",
                            "0.50",
                            "0.50",
                            "20.00"});
                table101.AddRow(new string[] {
                            "Today",
                            "Opening Balance",
                            "C",
                            "0.00",
                            "0.00",
                            "0.00",
                            "20.00"});
#line 184
 await testRunner.ThenAsync("the following entries appear in the merchants balance history for estate \'Test Es" +
                        "tate 1\' and merchant \'Test Merchant 2\'", ((string)(null)), table101, "Then ");
#line hidden
                Reqnroll.Table table102 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "Reference",
                            "EntryType",
                            "In",
                            "Out",
                            "ChangeAmount",
                            "Balance"});
                table102.AddRow(new string[] {
                            "Today",
                            "Merchant Deposit",
                            "C",
                            "110.00",
                            "0.00",
                            "110.00",
                            "230.00"});
                table102.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "100.00",
                            "100.00",
                            "130.00"});
                table102.AddRow(new string[] {
                            "Today",
                            "Transaction Completed",
                            "D",
                            "0.00",
                            "10.00",
                            "10.00",
                            "30.00"});
                table102.AddRow(new string[] {
                            "Today",
                            "Transaction Fee Processed",
                            "C",
                            "0.00",
                            "0.85",
                            "0.50",
                            "20.00"});
                table102.AddRow(new string[] {
                            "Today",
                            "Opening Balance",
                            "C",
                            "0.00",
                            "0.00",
                            "0.00",
                            "20.00"});
#line 192
 await testRunner.ThenAsync("the following entries appear in the merchants balance history for estate \'Test Es" +
                        "tate 1\' and merchant \'Test Merchant 3\'", ((string)(null)), table102, "Then ");
#line hidden
                Reqnroll.Table table103 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber"});
                table103.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "1"});
#line 200
 await testRunner.WhenAsync("I request the receipt is resent", ((string)(null)), table103, "When ");
#line hidden
                Reqnroll.Table table104 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table104.AddRow(new string[] {
                            "Today",
                            "12",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456781",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup"});
#line 204
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table104, "When ");
#line hidden
                Reqnroll.Table table105 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table105.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "12",
                            "1000",
                            "Device Identifier 123456781 not valid for Merchant Test Merchant 1"});
#line 208
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table105, "Then ");
#line hidden
                Reqnroll.Table table106 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table106.AddRow(new string[] {
                            "Today",
                            "13",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "InvalidEstate",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup"});
#line 212
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table106, "When ");
#line hidden
                Reqnroll.Table table107 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table107.AddRow(new string[] {
                            "InvalidEstate",
                            "Test Merchant 1",
                            "13",
                            "1001",
                            "Estate Id [79902550-64df-4491-b0c1-4e78943928a3] is not a valid estate"});
#line 216
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table107, "Then ");
#line hidden
                Reqnroll.Table table108 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table108.AddRow(new string[] {
                            "Today",
                            "14",
                            "Sale",
                            "1",
                            "InvalidMerchant",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup"});
#line 220
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table108, "When ");
#line hidden
                Reqnroll.Table table109 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table109.AddRow(new string[] {
                            "Test Estate 1",
                            "InvalidMerchant",
                            "14",
                            "1002",
                            "Merchant Id [d59320fa-4c3e-4900-a999-483f6a10c69a] is not a valid merchant for es" +
                                "tate [Test Estate 1]"});
#line 224
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table109, "Then ");
#line hidden
                Reqnroll.Table table110 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table110.AddRow(new string[] {
                            "Today",
                            "15",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "EmptyContract",
                            "Variable Topup"});
#line 228
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table110, "When ");
#line hidden
                Reqnroll.Table table111 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table111.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "15",
                            "1012",
                            "Contract Id [00000000-0000-0000-0000-000000000000] must be set for a sale transac" +
                                "tion"});
#line 232
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table111, "Then ");
#line hidden
                Reqnroll.Table table112 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table112.AddRow(new string[] {
                            "Today",
                            "16",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "InvalidContract",
                            "Variable Topup"});
#line 236
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table112, "When ");
#line hidden
                Reqnroll.Table table113 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table113.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "16",
                            "1015",
                            "Contract Id [934d8164-f36a-448e-b27b-4d671d41d180] not valid for Merchant [Test M" +
                                "erchant 1]"});
#line 240
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table113, "Then ");
#line hidden
                Reqnroll.Table table114 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table114.AddRow(new string[] {
                            "Today",
                            "17",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "EmptyProduct"});
#line 244
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table114, "When ");
#line hidden
                Reqnroll.Table table115 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table115.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "17",
                            "1013",
                            "Product Id [00000000-0000-0000-0000-000000000000] must be set for a sale transact" +
                                "ion"});
#line 248
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table115, "Then ");
#line hidden
                Reqnroll.Table table116 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table116.AddRow(new string[] {
                            "Today",
                            "18",
                            "Sale",
                            "1",
                            "Test Merchant 1",
                            "123456780",
                            "Test Estate 1",
                            "Safaricom",
                            "100.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "InvalidProduct"});
#line 252
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table116, "When ");
#line hidden
                Reqnroll.Table table117 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table117.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "18",
                            "1016",
                            "Product Id [934d8164-f36a-448e-b27b-4d671d41d180] not valid for Merchant [Test Me" +
                                "rchant 1]"});
#line 256
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table117, "Then ");
#line hidden
                Reqnroll.Table table118 = new Reqnroll.Table(new string[] {
                            "DateTime",
                            "TransactionNumber",
                            "TransactionType",
                            "TransactionSource",
                            "MerchantName",
                            "DeviceIdentifier",
                            "EstateName",
                            "OperatorName",
                            "TransactionAmount",
                            "CustomerAccountNumber",
                            "CustomerEmailAddress",
                            "ContractDescription",
                            "ProductName"});
                table118.AddRow(new string[] {
                            "Today",
                            "19",
                            "Sale",
                            "1",
                            "Test Merchant 4",
                            "123456783",
                            "Test Estate 1",
                            "Safaricom",
                            "300.00",
                            "123456789",
                            "testcustomer@customer.co.uk",
                            "Safaricom Contract",
                            "Variable Topup"});
#line 260
 await testRunner.WhenAsync("I perform the following transactions", ((string)(null)), table118, "When ");
#line hidden
                Reqnroll.Table table119 = new Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "TransactionNumber",
                            "ResponseCode",
                            "ResponseMessage"});
                table119.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 4",
                            "19",
                            "1009",
                            "Merchant [Test Merchant 4] does not have enough credit available [100.00] to perf" +
                                "orm transaction amount [300.00]"});
#line 264
 await testRunner.ThenAsync("transaction response should contain the following information", ((string)(null)), table119, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
