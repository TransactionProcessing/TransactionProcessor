{
  "AppSettings": {
    "ClientId": "serviceClient",
    "ClientSecret": "d192cbc46d834d0da90e8a9d50ded543",
    "ContractProductFeeCacheExpiryInHours": "",
    "ContractProductFeeCacheEnabled": "",
    //"SecurityService": "https://127.0.0.1:5001",
    "ProjectionTraceThresholdInSeconds": 1,
    "EventHandlerConfiguration": {
      "TransactionProcessor.BusinessLogic.EventHandling.ReadModelDomainEventHandler, TransactionProcessor.BusinessLogic": [
        "EstateCreatedEvent",
        "SecurityUserAddedToEstateEvent",
        "EstateReferenceAllocatedEvent",
        "MerchantCreatedEvent",
        "MerchantReferenceAllocatedEvent",
        "AddressAddedEvent",
        "ContactAddedEvent",
        "SecurityUserAddedToMerchantEvent",
        "DeviceAddedToMerchantEvent",
        "DeviceSwappedForMerchantEvent",
        "OperatorAssignedToMerchantEvent",
        "OperatorRemovedFromMerchantEvent",
        "SettlementScheduleChangedEvent",
        "ContractAddedToMerchantEvent",
        "ContractRemovedFromMerchantEvent",
        "MerchantNameUpdatedEvent",
        "MerchantAddressLine1UpdatedEvent",
        "MerchantAddressLine2UpdatedEvent",
        "MerchantAddressLine3UpdatedEvent",
        "MerchantAddressLine4UpdatedEvent",
        "MerchantCountyUpdatedEvent",
        "MerchantRegionUpdatedEvent",
        "MerchantTownUpdatedEvent",
        "MerchantPostalCodeUpdatedEvent",
        "MerchantContactNameUpdatedEvent",
        "MerchantContactEmailAddressUpdatedEvent",
        "MerchantContactPhoneNumberUpdatedEvent",
        "ContractCreatedEvent",
        "FixedValueProductAddedToContractEvent",
        "VariableValueProductAddedToContractEvent",
        "TransactionFeeForProductAddedToContractEvent",
        "TransactionFeeForProductDisabledEvent",
        "TransactionHasBeenCompletedEvent",
        "SettledMerchantFeeAddedToTransactionEvent",
        "MerchantFeeSettledEvent",
        "TransactionCostInformationRecordedEvent",
        "FloatCreditPurchasedEvent",
        "FloatCreatedForContractProductEvent",
        "FloatDecreasedByTransactionEvent",
        "TransactionHasStartedEvent",
        "AdditionalRequestDataRecordedEvent",
        "AdditionalResponseDataRecordedEvent",
        "TransactionHasBeenLocallyAuthorisedEvent",
        "TransactionHasBeenLocallyDeclinedEvent",
        "TransactionAuthorisedByOperatorEvent",
        "TransactionDeclinedByOperatorEvent",
        "ProductDetailsAddedToTransactionEvent",
        "TransactionSourceAddedToTransactionEvent",
        "ReconciliationHasStartedEvent",
        "OverallTotalsRecordedEvent",
        "ReconciliationHasBeenLocallyAuthorisedEvent",
        "ReconciliationHasBeenLocallyDeclinedEvent",
        "ReconciliationHasCompletedEvent",
        "OperatorCreatedEvent",
        "OperatorNameUpdatedEvent",
        "OperatorRequireCustomMerchantNumberChangedEvent",
        "OperatorRequireCustomTerminalNumberChangedEvent",
        "StatementCreatedEvent",
        "TransactionAddedToStatementEvent",
        "SettledFeeAddedToStatementEvent",
        "StatementGeneratedEvent",
        "SettlementCreatedForDateEvent",
        "MerchantFeeAddedPendingSettlementEvent",
        "SettlementCompletedEvent",
        "SettlementProcessingStartedEvent",
        "ImportLogCreatedEvent",
        "FileAddedToImportLogEvent",
        "FileCreatedEvent",
        "FileLineAddedEvent",
        "FileLineProcessingSuccessfulEvent",
        "FileLineProcessingFailedEvent",
        "FileLineProcessingIgnoredEvent",
        "FileProcessingCompletedEvent"
      ]
    },
    "EventHandlerConfigurationDomain": {
      "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic": [
        "CustomerEmailReceiptRequestedEvent",
        "TransactionHasBeenCompletedEvent",
        "SettledMerchantFeeAddedToTransactionEvent",
        "MerchantFeeSettledEvent",
        "TransactionCostInformationRecordedEvent",
        "FloatCreditPurchasedEvent",
        "MerchantFeePendingSettlementAddedToTransactionEvent"
      ],
      "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic": [
        "CallbackReceivedEnrichedEvent",
        "StatementGeneratedEvent"
      ],
      "TransactionProcessor.BusinessLogic.EventHandling.MerchantStatementDomainEventHandler,TransactionProcessor.BusinessLogic": [
        "TransactionHasBeenCompletedEvent",
        "StatementGeneratedEvent"
      ],
      "TransactionProcessor.BusinessLogic.EventHandling.MerchantSettlementDomainEventHandler,TransactionProcessor.BusinessLogic": [
        "MerchantFeeSettledEvent"
      ]
    },
    "EventHandlerConfigurationOrdered": {
      "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine": [
        "EstateCreatedEvent",
        "MerchantCreatedEvent",
        "ManualDepositMadeEvent",
        "WithdrawalMadeEvent",
        "AutomaticDepositMadeEvent",
        "TransactionHasStartedEvent",
        "TransactionHasBeenCompletedEvent",
        "SettledMerchantFeeAddedToTransactionEvent",
        "VoucherGeneratedEvent",
        "VoucherIssuedEvent",
        "BarcodeAddedEvent",
        "VoucherFullyRedeeemedEvent"
      ]
    },
    "EventStateConfig": {
      "EstateCreatedEvent": "MerchantBalanceProjectionState",
      "MerchantCreatedEvent": "MerchantBalanceProjectionState",
      "ManualDepositMadeEvent": "MerchantBalanceProjectionState",
      "WithdrawalMadeEvent": "MerchantBalanceProjectionState",
      "AutomaticDepositMadeEvent": "MerchantBalanceProjectionState",
      "TransactionHasStartedEvent": "MerchantBalanceProjectionState",
      "TransactionHasBeenCompletedEvent": "MerchantBalanceProjectionState",
      "SettledMerchantFeeAddedToTransactionEvent": "MerchantBalanceProjectionState",
      "VoucherGeneratedEvent": "VoucherState",
      "VoucherIssuedEvent": "VoucherState",
      "BarcodeAddedEvent": "VoucherState",
      "VoucherFullyRedeeemedEvent": "VoucherState"
    },
    "SubscriptionConfiguration": {
      "InternalSubscriptionService": "true",
      "PersistentSubscriptionPollingInSeconds": 480,
      "InternalSubscriptionServiceCacheDuration": 120,
      "SubscriptionWorkers": [
        {
          "WorkerName": "Transaction Processor Main",
          "IncludeGroups": "Transaction Processor",
          "IgnoreGroups": "Domain, Ordered,local-",
          "Enabled": false,
          "InflightMessages": 20,
          "IsOrdered": false,
          "IsDomainOnly": false,
          "InstanceCount": 1,
          "EventHandlerConfiguration": "EventHandlerConfiguration"
        },
        {
          "WorkerName": "Transaction Processor Domain",
          "IncludeGroups": "Transaction Processor - Domain",
          "IgnoreGroups": "Ordered,local-",
          "Enabled": true,
          "InflightMessages": 20,
          "IsOrdered": false,
          "IsDomainOnly": true,
          "InstanceCount": 1,
          "EventHandlerConfiguration": "EventHandlerConfigurationDomain"
        },
        {
          "WorkerName": "Transaction Processor Projections",
          "IncludeGroups": "Transaction Processor - Ordered",
          "IgnoreGroups": "local-",
          "Enabled": false,
          "InstanceCount": 1,
          "IsOrdered": true,
          "IsDomainOnly": false,
          "EventHandlerConfiguration": "EventHandlerConfigurationOrdered"
        }
      ]
    }
  },
  "ConnectionStrings": {
    // SQL Server
    "TransactionProcessorReadModel": "server=192.168.1.167;user id=sa;password=Sc0tland;database=TransactionProcessorReadModel;Encrypt=false"
    // MySql
    //"TransactionProcessorReadModel": "server=127.0.0.1;userid=root;password=sp1ttal;database=TransactionProcessorReadModel"
  },
  "SecurityConfiguration": {
    "ApiName": "transactionProcessor"
    //"Authority": "https://127.0.0.1:5001"
  },
  "OperatorConfiguration": {
    "Safaricom": {
      "Url": "http://192.168.1.167:9000/api/safaricom",
      "LoginId": "D-S136",
      "MSISDN": "700945625",
      "Pin": "0322",
      "Password": "@SafePay33",
      "ExtCode": "SA"
    },
    "PataPawaPostPay": {
      "Url": "http://192.168.1.167:9000/PataPawaPostPayService/basichttp",
      "Username": "testuser1",
      "Password": "password1",
      "ApiLogonRequired": true
    },
    "PataPawaPrePay": {
      "Url": "http://192.168.1.167:9000/api/patapawaprepay",
      "Username": "operatora",
      "Password": "1234567898",
      "ApiLogonRequired": true
    }
  }
}