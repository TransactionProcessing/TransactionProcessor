{
  "AppSettings": {
    "ClientId": "serviceClient",
    "ClientSecret": "d192cbc46d834d0da90e8a9d50ded543",
    "ContractProductFeeCacheExpiryInHours": "",
    "ContractProductFeeCacheEnabled": "",
    //"SecurityService": "https://127.0.0.1:5001",
    "ProjectionTraceThresholdInSeconds": 1,
    "EventHandlerConfiguration": {
      // Transaction Event Handler
      "TransactionHasBeenCompletedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "CustomerEmailReceiptRequestedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "SettledMerchantFeeAddedToTransactionEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantFeeSettledEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantFeePendingSettlementAddedToTransactionEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "VoucherIssuedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.VoucherDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "TransactionCostInformationRecordedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "FloatCreditPurchasedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      // Estate Domain Event Handler
      "EstateCreatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.EstateDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "SecurityUserAddedToEstateEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.EstateDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "EstateReferenceAllocatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.EstateDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      // Merchant Domain Event Handler
      "MerchantCreatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "MerchantReferenceAllocatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "AddressAddedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "ContactAddedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "SecurityUserAddedToMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "DeviceAddedToMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "DeviceSwappedForMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "OperatorAssignedToMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "OperatorRemovedFromMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "SettlementScheduleChangedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "CallbackReceivedEnrichedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "ContractAddedToMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "ContractRemovedFromMerchantEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantNameUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantAddressLine1UpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantAddressLine2UpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantAddressLine3UpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantAddressLine4UpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantCountyUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantRegionUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantTownUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantPostalCodeUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantContactNameUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantContactEmailAddressUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "MerchantContactPhoneNumberUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.MerchantDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      // Operator Domain Event Handler
      "OperatorCreatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.OperatorDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "OperatorNameUpdatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.OperatorDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "OperatorRequireCustomMerchantNumberChangedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.OperatorDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "OperatorRequireCustomTerminalNumberChangedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.OperatorDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      // Contract Domain Event Handler
      "ContractCreatedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.ContractDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "FixedValueProductAddedToContractEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.ContractDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "VariableValueProductAddedToContractEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.ContractDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "TransactionFeeForProductAddedToContractEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.ContractDomainEventHandler, TransactionProcessor.BusinessLogic"
      ],
      "TransactionFeeForProductDisabledEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.ContractDomainEventHandler, TransactionProcessor.BusinessLogic"
      ]
    },
    "EventHandlerConfigurationOrdered": {
      "EstateCreatedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "MerchantCreatedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "ManualDepositMadeEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "WithdrawalMadeEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "AutomaticDepositMadeEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "TransactionHasStartedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "TransactionHasBeenCompletedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "CustomerEmailReceiptRequestedEvent": [
        "TransactionProcessor.BusinessLogic.EventHandling.TransactionDomainEventHandler,TransactionProcessor.BusinessLogic"
      ],
      "SettledMerchantFeeAddedToTransactionEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "VoucherGeneratedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "VoucherIssuedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "BarcodeAddedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ],
      "VoucherFullyRedeeemedEvent": [
        "TransactionProcessor.ProjectionEngine.EventHandling.EventHandler,TransactionProcessor.ProjectionEngine"
      ]
    },
    "EventStateConfig": {
      "EstateCreatedEvent": "MerchantBalanceProjectionState",
      "MerchantCreatedEvent": "MerchantBalanceProjectionState",
      "ManualDepositMadeEvent": "MerchantBalanceProjectionState",
      "WithdrawalMadeEvent": "MerchantBalanceProjectionState",
      "AutomaticDepositMadeEvent": "MerchantBalanceProjectionState",
      "TransactionHasStartedEvent": "MerchantBalanceProjectionState",
      "TransactionHasBeenCompletedEvent": "MerchantBalanceProjectionState",
      "SettledMerchantFeeAddedToTransactionEvent": "MerchantBalanceProjectionState",
      "VoucherGeneratedEvent": "VoucherState",
      "VoucherIssuedEvent": "VoucherState",
      "BarcodeAddedEvent": "VoucherState",
      "VoucherFullyRedeeemedEvent": "VoucherState"
    },
    "SubscriptionConfiguration": {
      "InternalSubscriptionService": "true",
      "PersistentSubscriptionPollingInSeconds": 480,
      "InternalSubscriptionServiceCacheDuration": 120,
      "SubscriptionWorkers": [
        {
          "WorkerName": "Transaction Processor Main",
          "IncludeGroups": "Transaction Processor",
          "IgnoreGroups": "Ordered,local-",
          "Enabled": true,
          "InflightMessages": 500,
          "IsOrdered": false,
          "InstanceCount": 1
        },
        {
          "WorkerName": "Transaction Processor Projections",
          "IncludeGroups": "Transaction Processor - Ordered",
          "IgnoreGroups": "local-",
          "Enabled": true,
          "InstanceCount": 1,
          "IsOrdered": true
        }
      ]
    }
  },
  "ConnectionStrings": {
    // SQL Server
    "TransactionProcessorReadModel": "server=192.168.1.167;user id=sa;password=Sc0tland;database=TransactionProcessorReadModel;Encrypt=false"
    // MySql
    //"TransactionProcessorReadModel": "server=127.0.0.1;userid=root;password=sp1ttal;database=TransactionProcessorReadModel"
  },
  "SecurityConfiguration": {
    "ApiName": "transactionProcessor"
    //"Authority": "https://127.0.0.1:5001"
  },
  "OperatorConfiguration": {
    "Safaricom": {
      "Url": "http://192.168.1.167:9000/api/safaricom",
      "LoginId": "D-S136",
      "MSISDN": "700945625",
      "Pin": "0322",
      "Password": "@SafePay33",
      "ExtCode": "SA"
    },
    "PataPawaPostPay": {
      "Url": "http://192.168.1.167:9000/PataPawaPostPayService/basichttp",
      "Username": "testuser1",
      "Password": "password1",
      "ApiLogonRequired": true
    },
    "PataPawaPrePay": {
      "Url": "http://192.168.1.167:9000/api/patapawaprepay",
      "Username": "operatora",
      "Password": "1234567898",
      "ApiLogonRequired": true
    }
  }
}